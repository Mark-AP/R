##################### Basic mathematics ##########################
12+8
12*64
(543+6472)*7

########################### Variables #############################
# You can assign values to a variable by "=", "<-", assign()
b = 8
c <- 9
assign("beef", 70)

# You can also assign multiple values at once

d = e = 20
f <- g <- 40

# removing values from variables; this helps to free up memory to run faster
rm(beef)
beef
rm(b,c,d,e,f,g)

########################## data types #######################

a = 32
b = "bacon"
c = 123.4567
d = "hello"

class(a)
class(b)

is.numeric(a)
is.numeric(b)
is.numeric(c)
is.numeric(d)

# Common characteristics 
# numeric (integer, single, double)
# character
# logical (boolean)
# complex and raw

######################### Dates ############################

name = "Amazing food"
nchar(name)
nchar("name")
# R counts space as characters
# In the first case R treats the name as a variable
# In the second case R treats it as a string

fish = as.Date("2020-08-02")
bacon = ("2020-08-02")
class(fish)
class(bacon)

##################### Logical Operators ####################

5 == 7 # "=" is to assign while "==" is to compare values
5 == 5

12 != 14 # This is the NOT logical values
12 != 12

45 < 83 # Greater than
7 <= 7 # Less than or equal to

# This can be applied to strings

"bacon" =="bacon"
"bacon" == "ham"


####################### Vectors #############################

m1 = c(1,2,3,4,5) # c() is for concatenation
m2 = c("hello", "world", "yay!!")

m1*3
m1 ^ 2
sqrt(m1)

################ More vectors ############################

c1 = 1:5 # does the same thing as m1 but faster :)
c2 = -3: -15

c3 = 3:5
c4 = 8:10

c3 + c4 # This works due to c3 and c4 being the same length

# To check length use the length function: length()
length(c3)
length(c4)

############### Even more vectors ########################

# Uneven vectors
d1 = 1:4
d2 = 1:3

d3 = d1 +d2; #what will happen is that it will loop again to make up for the difference
# 1+1, 2+2, 3+3, 4+1

a = 1:10
a < 5

any(a <5) # Tests that if any of the values comes out true
all(a <5) # If all the numbers are less than 5 then comes out true

# ghost[] allows you to extract an element from the vector either a specific or range
ghost = 1:100
ghost[50]
ghost[50:60]

######################### Data Frames ########################

# data frames are like spreadsheet

id <- 1:15
age <- c(22, 60, 45, 38, 36, 48, 44, 38, 40, 38, 32, 37, 44, 39, 41)
name <- c("mathew", "Rick", "ZacK", "Ravi", "Liana",
          "Keith","Armen", "ANson", "Bryan", "MD",
          "Vish", "Pons", "Neil", "Chris", "Som")
a <- data.frame(id, age, name) # This is how you make the data frame
a

nrow(a)
ncol(a)
dim(a) # Allows you to get the dimension of the dataframe

names(a)[2]
head(a) # allows you to see the first 6 rows
tail(a) # allows you to see the last 6 rows

################### More on Dataframes #####################

a$age # the dollar sign ($) with the data frame allows you to access the variables within it

a[2] # allows you to access the whole column
a[2,2] # it specifically pin points the corresponding row and column 
a[3,2] # the first to go is the row and the second is the column
a[3, 1:3] # this invokes the 3rd row from each column
a[3, ] # leaving the row or column empty (in this case, column) will display either the whole row or the whole column

a[,3] # Displays entire column 3

class(a["age"]) # THis will return data.frame because you are returning a piece of the df.
class(a[,"age"]) # In this case you are returning the entire column of the df which will result in numeric classification

# A better way to see the type is using the str function
str(a)

###################### List #############################

# Under a list you can store a combination of data types like numeric, strings, df or list

marklist = list(71, "steak", "cat", a); marklist

# accessing list

names(marklist) = c("number", "food", "animal", "exdf")
marklist[["food"]]

marklist[["exdf"]]$age # we can extract more with the dollar sign with the name of the df

# adding another into the list

length(marklist)

marklist[["game"]] = "SSBU"; marklist
length(marklist)

####################### Matrix ##########################

# It has to contain the same data type

one = matrix(1:100, nrow = 10); one

# To do the following we want to have the same dimension
# Use the dim function

two = matrix(51:60, nrow =  2); two
three = matrix(61:70, nrow =  2); three

two * three


#### More information on Vector, matrix/array, data frame, list ####

# Vector
# 1) 1+ numbers in a 1-D array
# 2) All same data type
# 3) R's basic data object

# Matrix
# 1) Two dimensions
# 2) Same length
# 3) Same data class
# 4) Columns not named

# Array
# 1) Identical to a matrix but 3+ dimensions
# Example

a1 = array(c(1:24), c(4,3,2))
# This 1:24 gives you numbers, and the RHS is the rows, columns, and tables 

# Data frame
# 1) Can have vectors of multiple types
# 2) All same length
# 3) Closest R analog to spreadsheet
# 4) Special functions

# List
# 1) Most flexible
# 2) Ordered collection of elements
# 3) Any class, length, or structure
# 4) can include list 
